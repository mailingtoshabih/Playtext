{"version":3,"sources":["components/Navbar.js","components/TextArea.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlFor","TextArea","useState","text","setText","extract","setExtract","style","color","heading","rows","value","onChange","event","target","placeholder","backgroundColor","newText","toUpperCase","toLowerCase","replace","trim","split","i","length","charAt","substring","join","finalText","charCodeAt","includes","match","lines","line","navigator","clipboard","writeText","Math","round","readOnly","App","setMode","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.28afe4e9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Navbar = (props) => {\r\n\r\n      return (\r\n\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n\r\n                  <div className=\"container-fluid\">\r\n\r\n                  <a className=\"navbar-brand\" href=\"/\"><strong>{props.title}</strong></a>\r\n\r\n                  <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                  <span className=\"navbar-toggler-icon\"></span>\r\n                  </button>\r\n\r\n                  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n\r\n                  <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n\r\n                        <li className=\"nav-item\">\r\n                        <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                        </li>\r\n\r\n                        <div className={`form-check form-switch my-2 mx-3 text-${props.mode === \"dark\" ? \"light\" : \"dark\" }`}>\r\n                              <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n                              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Toggle Lights</label>\r\n                        </div>\r\n                        \r\n\r\n                  </ul> \r\n\r\n\r\n                        \r\n                        <button className=\"btn btn-warning mx-2\" >Donate $$</button>\r\n                  \r\n\r\n                  </div>\r\n\r\n                  </div>\r\n            </nav>\r\n\r\n      )\r\n}\r\n\r\nexport default Navbar","import React, {useState} from 'react'\r\n\r\n// usestate is a hook\r\n\r\nexport default function TextArea(props) {\r\n\r\n      const [text, setText] = useState(\"\");\r\n\r\n      const [extract, setExtract] = useState(\"\");\r\n\r\n\r\n\r\n\r\n      const handleOnChange = (event) => {\r\n            setText(event.target.value);    \r\n      }\r\n\r\n\r\n      // extraction's onchange method\r\n      // const handleOnExtract = (event) => {\r\n      //       setExtract(event.target.value);    \r\n      // }\r\n\r\n\r\n\r\n\r\n      //--------------------------------------------------------------------------------------\r\n\r\n      const toUpperCaseClick = () => {\r\n            \r\n            let newText = text.toUpperCase();\r\n            setText(newText);\r\n      }\r\n\r\n\r\n      const toLowerCaseClick = () => {\r\n            \r\n            let newText = text.toLowerCase();\r\n            setText(newText);\r\n      }\r\n\r\n\r\n      const removeExtraSpaces = () => {\r\n            \r\n            let newText = text; \r\n            newText = newText.replace(/\\s{2,}/g, ' ').trim();\r\n            setText(newText);\r\n      }\r\n\r\n\r\n      const removeAllSpaces = () => {\r\n\r\n            let newText = text; \r\n            newText = newText.replace(/ /g,'');\r\n            setText(newText);\r\n      }\r\n\r\n\r\n      const capitalizeEachWord = () => {\r\n            \r\n            \r\n            let newText = text.toLowerCase().split(\" \");\r\n\r\n            for (let i = 0; i < newText.length; i++) {\r\n\r\n                  newText[i] = newText[i].charAt(0).toUpperCase() + newText[i].substring(1);     \r\n            }\r\n\r\n            newText = newText.join(\" \");\r\n\r\n            setText(newText);\r\n      }\r\n\r\n\r\n      const removeAllSymbols = () => {\r\n            \r\n            let newText = text; \r\n            newText = newText.replace(/[^\\w\\s]/g, '')\r\n            setText(newText);\r\n      }\r\n      \r\n      \r\n      const removeAllNumbers = () => {\r\n            \r\n            let newText = text; \r\n            newText = newText.replace(/[0-9]/g, '');\r\n            setText(newText);\r\n      }\r\n\r\n\r\n\r\n      const extractNumbers = () => {\r\n            \r\n            let newText = text;\r\n\r\n            newText = newText.split(\"\");\r\n\r\n            let finalText = \"\";\r\n\r\n            for (let i of newText){\r\n\r\n                  if ( (i.charCodeAt(0) < 58 && i.charCodeAt(0) > 47) || (i === \" \") || (i === \".\") ){\r\n\r\n                        finalText += i;\r\n                  }\r\n\r\n                  finalText = finalText.replace(/\\s{2,}/g, ' ').split(\" \").join(\"\\n\");\r\n           \r\n                  setExtract(finalText);\r\n            }\r\n      }\r\n      \r\n\r\n\r\n\r\n      const extractEmails = () => {\r\n            \r\n            let newText = text;\r\n\r\n            if(newText.includes(\"@\")){\r\n\r\n                  newText = newText.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi);\r\n                  \r\n                  setExtract(newText.join('\\n'));\r\n            }\r\n            \r\n      }\r\n\r\n\r\n\r\n      const lineByLine = () => {\r\n            \r\n            let newText = text;\r\n\r\n            newText = newText.replace(/\\s{2,}/g, ' ').trim();\r\n\r\n            if (newText){\r\n\r\n                  let lines = newText.split(\".\");\r\n                  let finalText = \"\";\r\n\r\n                  for( let line of lines){\r\n      \r\n                        if (line.charAt(0) === \" \") line = line.replace(\" \", \"\");\r\n                        finalText += line + \"\\n\";\r\n                  }\r\n      \r\n                  setText(finalText);\r\n            }\r\n      }\r\n      \r\n      const wordLineByLine = () => {\r\n            \r\n            let newText = text;\r\n\r\n            newText = newText.replace(/\\s{2,}/g, ' ').trim();\r\n\r\n            if (newText){\r\n\r\n                  let lines = newText.split(\" \");\r\n                  let finalText = \"\";\r\n      \r\n                  for( let line of lines){\r\n      \r\n                        if (line.charAt(0) === \" \") line = line.replace(\" \", \"\");\r\n                        finalText += line + \"\\n\";\r\n                  }\r\n      \r\n                  setText(finalText);\r\n            }\r\n      }\r\n\r\n\r\n\r\n      \r\n      \r\n\r\n\r\n      \r\n\r\n\r\n      const resetTextarea = () => {\r\n            setText(\"\");\r\n      }\r\n      \r\n      const resetExtractions = () => {\r\n            setExtract(\"\");\r\n      }\r\n\r\n\r\n      \r\n      \r\n      \r\n\r\n      return (\r\n            <>\r\n            <div className=\"container\">\r\n\r\n\r\n                  <h3 style={ {color : props.mode === \"dark\" ? \"white\" : \"black\" } }><strong>{props.heading}</strong></h3>\r\n\r\n                  <div className=\"my-3\">\r\n                        <textarea className=\"form-control\" id=\"myBox\" rows=\"14\" value={text} onChange={handleOnChange}  placeholder=\"Enter, Paste or Drag and Drop your text here...\" \r\n                        style={ {backgroundColor : props.mode === \"dark\" ? \"#dee2e6\" : \"white\" } }  ></textarea>\r\n                  </div>\r\n\r\n\r\n\r\n\r\n\r\n                  <button className=\"btn btn-primary my-3 mx-3\" onClick={toUpperCaseClick} >Convert to Uppercase</button>\r\n                  \r\n                  <button className=\"btn btn-primary my-3 mx-3\" onClick={toLowerCaseClick} >Convert to Lowercase</button>\r\n\r\n                  <button className=\"btn btn-primary my-3 mx-3\" onClick={removeExtraSpaces} >Remove Extra Spaces</button>\r\n\r\n                  <button className=\"btn btn-primary my-3 mx-3\" onClick={removeAllSpaces} >Remove All Spaces</button>\r\n\r\n                  <button className=\"btn btn-primary my-3 mx-3\" onClick={capitalizeEachWord} >Capitalize Each Word</button>\r\n\r\n                  <button className=\"btn btn-primary my-3 mx-3\" onClick={removeAllSymbols} >Remove All Symbol</button>\r\n\r\n\r\n                  <button className=\"btn btn-primary my-3 mx-3\" onClick={removeAllNumbers} >Remove All Numbers</button>\r\n\r\n                  <button className=\"btn btn-primary my-3 mx-3\"  onClick={extractNumbers}>Extract Numbers</button>\r\n\r\n                  <button className=\"btn btn-primary my-3 mx-3\" onClick={extractEmails} >Extract Emails</button>\r\n\r\n\r\n                  <button className=\"btn btn-primary my-3 mx-3\" onClick={lineByLine} >Print Sentence line-by-line</button>\r\n\r\n                  <button className=\"btn btn-primary my-3 mx-3\" onClick={wordLineByLine} >Print Words line-by-line</button>\r\n\r\n                  \r\n                  <button className=\"btn btn-success mx-3 my-3\" onClick={() => {navigator.clipboard.writeText(text)}} >Copy Text</button>\r\n\r\n                  <button className=\"btn btn-danger my-3 mx-2\" onClick={resetTextarea} >Reset</button>\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n            <div className=\"container my-3\">\r\n            \r\n                  <span className={`badge rounded-pill ${ props.mode === 'light' ? \"bg-dark\" : \"bg-light text-dark\" }`}>\r\n                  \r\n                        {text.length} characters\r\n                  </span>\r\n\r\n                  <span className={`badge rounded-pill ${ props.mode === 'light' ? \"bg-dark\" : \"bg-light text-dark\" } mx-3`}>\r\n                  \r\n                        Approx read time : {Math.round( (text.length) * 0.10 )} sec \r\n                  </span>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                  <hr/>\r\n\r\n                  <h3 className='heading my-1' style={ {color : props.mode === \"dark\" ? \"white\" : \"black\"} }><strong>Extractions</strong></h3>\r\n\r\n                  <span className={`badge rounded-pill ${ props.mode === 'light' ? \"bg-danger\" : \"bg-danger\" } `}> Beta </span>\r\n                  <span className={`badge rounded-pill ${ props.mode === 'light' ? \"bg-danger\" : \"bg-danger\" } mx-3`}> Read-only </span>\r\n\r\n\r\n\r\n\r\n                  <div className=\"my-3\">\r\n                        <textarea className=\"form-control\" id=\"myBox\" rows=\"10\" value={extract}  readOnly = {true}  placeholder=\"Emails and Numbers will be extracted here...\" \r\n                        style={ {backgroundColor : props.mode === \"dark\" ? \"#dee2e6\" : \"white\" } }  ></textarea>\r\n                  </div>\r\n\r\n                  <button className=\"btn btn-success\" onClick={() => {navigator.clipboard.writeText(extract)}} >Copy</button>\r\n\r\n                  <button className=\"btn btn-danger mx-2\" onClick={resetExtractions} >Reset</button>\r\n\r\n                  \r\n            </div>\r\n            \r\n\r\n\r\n\r\n            </>\r\n      )\r\n}\r\n","\nimport Navbar from './components/Navbar';\nimport TextArea from './components/TextArea';\nimport React, { useState } from 'react'\n\n\n\n//-----------------------------------------------------------------------------------\n\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\");        // dark mode state\n\n  //---------------------------------------------------------------------------------\n\n  const toggleMode =() =>{\n\n    if (mode === \"light\"){\n      setMode(\"dark\");\n      document.body.style.backgroundColor = '#161a1d';\n    \n    }\n    \n    else{\n      setMode(\"light\");\n      document.body.style.backgroundColor = '#ffffff';\n      //e9ecef\n    }\n  }\n\n  //--------------------------------------------------------------------------------------\n\n\n\n\n  return (\n    <>\n    \n    \n\n    {/* <Alert/> */}\n\n    \n      <Navbar title={\"Playtext\"} mode={mode} toggleMode={toggleMode}/>\n\n\n\n      <div className=\"container my-3\">\n        \n        <TextArea heading=\"Text Utility\" mode={mode}/>\n            \n      </div>\n    \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}